# main.py

from flask import Flask, request, jsonify, make_response
from flask_pymongo import PyMongo
from flask_jwt_extended import JWTManager, jwt_required, create_access_token, get_jwt_identity
from bson import ObjectId
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

app = Flask(__name__)
app.config['MONGO_URI'] = os.getenv('MONGO_URI')
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY')
mongo = PyMongo(app)
jwt = JWTManager(app)

# Routes

# User Login
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    # Check if user exists in your database (replace with your actual logic)
    # For example, assuming you have a 'users' collection in MongoDB
    user = mongo.db.users.find_one({'email': email, 'password': password})

    if user:
        access_token = create_access_token(identity=str(user['_id']))
        return jsonify({'token': access_token}), 200
    else:
        return jsonify({'error': 'Invalid credentials'}), 401

# CRUD Operations for Notes

# Get all notes for a user
@app.route('/notes', methods=['GET'])
@jwt_required()
def get_notes():
    current_user = get_jwt_identity()
    notes = list(mongo.db.notes.find({'user': current_user}, {'user': 0}))  # Exclude 'user' field from response
    return jsonify(notes), 200

# Get a specific note by ID
@app.route('/notes/<note_id>', methods=['GET'])
@jwt_required()
def get_note(note_id):
    current_user = get_jwt_identity()
    note = mongo.db.notes.find_one({'_id': ObjectId(note_id), 'user': current_user})
    if note:
        return jsonify(note), 200
    else:
        return jsonify({'message': 'Note not found or not authorized'}), 404

# Create a new note
@app.route('/notes', methods=['POST'])
@jwt_required()
def create_note():
    data = request.get_json()
    title = data.get('title')
    content = data.get('content')
    current_user = get_jwt_identity()

    new_note = {'title': title, 'content': content, 'user': current_user}
    result = mongo.db.notes.insert_one(new_note)

    if result.inserted_id:
        return jsonify({'message': 'Note created successfully'}), 201
    else:
        return jsonify({'error': 'Failed to create note'}), 500

# Update a note by ID
@app.route('/notes/<note_id>', methods=['PUT'])
@jwt_required()
def update_note(note_id):
    data = request.get_json()
    title = data.get('title')
    content = data.get('content')
    current_user = get_jwt_identity()

    result = mongo.db.notes.update_one(
        {'_id': ObjectId(note_id), 'user': current_user},
        {'$set': {'title': title, 'content': content}}
    )

    if result.modified_count > 0:
        return jsonify({'message': 'Note updated successfully'}), 200
    else:
        return jsonify({'message': 'Note not found or not authorized'}), 404

# Delete a note by ID
@app.route('/notes/<note_id>', methods=['DELETE'])
@jwt_required()
def delete_note(note_id):
    current_user = get_jwt_identity()

    result = mongo.db.notes.delete_one({'_id': ObjectId(note_id), 'user': current_user})

    if result.deleted_count > 0:
        return jsonify({'message': 'Note deleted successfully'}), 200
    else:
        return jsonify({'message': 'Note not found or not authorized'}), 404

# Handle 404 Errors
@app.errorhandler(404)
def not_found_error(error):
    return jsonify({'error': 'Not found'}), 404

# Handle 500 Errors
@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': 'Internal server error'}), 500

if __name__ == '__main__':
    app.run(debug=True)
// frontend/src/components/CreateNote.js
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './CreateNote.css';

const CreateNote = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (event) => {
    event.preventDefault();
    const token = localStorage.getItem('token');

    try {
      await axios.post('http://localhost:5000/notes', { title, content }, {
        headers: { Authorization: `Bearer ${token}` },
      });
      navigate('/notes');
    } catch (error) {
      setError('Failed to create note');
    }
  };

  return (
    <div className="create-note">
      <h2>Create Note</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Title</label>
          <input
            type="text"
            className="form-control"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label>Content</label>
          <textarea
            className="form-control"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="btn btn-primary">Create Note</button>
      </form>
    </div>
  );
};

export default CreateNote;
// frontend/src/components/Dashboard.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import './Dashboard.css';

const Dashboard = () => {
  const [notesCount, setNotesCount] = useState(0);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchNotesCount = async () => {
      const token = localStorage.getItem('token');
      try {
        const response = await axios.get('http://localhost:5000/notes', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setNotesCount(response.data.length);
      } catch (error) {
        setError('Failed to fetch notes count');
      }
    };

    fetchNotesCount();
  }, []);

  return (
    <div className="dashboard">
      <h2>Welcome to Your Notes Dashboard</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      <div className="dashboard-info">
        <p>You have <strong>{notesCount}</strong> notes.</p>
        <Link to="/create" className="btn btn-primary">Create New Note</Link>
        <Link to="/notes" className="btn btn-secondary ms-2">View All Notes</Link>
      </div>
    </div>
  );
};

export default Dashboard;

// frontend/src/components/EditNote.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import './EditNote.css';

const EditNote = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    const fetchNote = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('No token found. Please log in.');
        return;
      }

      try {
        const response = await axios.get(`http://localhost:5000/notes/${id}`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setTitle(response.data.title);
        setContent(response.data.content);
      } catch (error) {
        setError('Failed to fetch note. Please make sure you are logged in.');
        console.error('Failed to fetch note', error);
      }
    };

    fetchNote();
  }, [id]);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setError('');
    setSuccess('');

    const token = localStorage.getItem('token');
    if (!token) {
      setError('No token found. Please log in.');
      return;
    }

    try {
      await axios.put(`http://localhost:5000/notes/${id}`, { title, content }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setSuccess('Note updated successfully!');
      navigate('/notes');
    } catch (error) {
      setError('Failed to update note');
      console.error('Failed to update note', error);
    }
  };

  return (
    <div className="edit-note container">
      <h2>Edit Note</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      {success && <div className="alert alert-success">{success}</div>}
      <form onSubmit={handleSubmit}>
        <div className="form-group mb-3">
          <label>Title</label>
          <input
            type="text"
            className="form-control"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </div>
        <div className="form-group mb-3">
          <label>Content</label>
          <textarea
            className="form-control"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            required
          ></textarea>
        </div>
        <button type="submit" className="btn btn-success">Update Note</button>
      </form>
    </div>
  );
};

export default EditNote;

// frontend/src/components/Login.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/login', { email, password });
      localStorage.setItem('token', response.data.token);
      navigate('/notes');
    } catch (error) {
      setError('Invalid email or password');
    }
  };

  return (
    <div className="login-form">
      <h2>Login</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            className="form-control"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            className="form-control"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="btn btn-primary">Login</button>
      </form>
    </div>
  );
};

export default Login;
// frontend/src/components/NoteForm.js
import React, { useState } from 'react';
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import './NoteForm.css';

const NoteForm = ({ fetchNotes }) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      await axios.post('http://localhost:5000/notes', { title, content }, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
      });
      setTitle('');
      setContent('');
      fetchNotes();
    } catch (error) {
      console.error('Error creating note', error);
    }
  };

  return (
    <div className="note-form">
      <h3>Create a New Note</h3>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Title</label>
          <input
            type="text"
            className="form-control"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label>Content</label>
          <textarea
            className="form-control"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="btn btn-primary">Add Note</button>
      </form>
    </div>
  );
};

export default NoteForm;
// frontend/src/components/NoteList.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import './NoteList.css';

const NoteList = () => {
  const [notes, setNotes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchNotes = async () => {
      const token = localStorage.getItem('token');
      try {
        const response = await axios.get('http://localhost:5000/notes', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setNotes(response.data);
      } catch (error) {
        setError('Error fetching notes');
        console.error('Error fetching notes', error);
      } finally {
        setLoading(false);
      }
    };

    fetchNotes();
  }, []);

  const handleDelete = async (id) => {
    const token = localStorage.getItem('token');
    try {
      await axios.delete(`http://localhost:5000/notes/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setNotes(notes.filter(note => note._id !== id));
    } catch (error) {
      setError('Error deleting note');
      console.error('Error deleting note', error);
    }
  };

  return (
    <div className="note-list container">
      <h2 className="mb-4">Notes</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      {loading ? (
        <p className="text-center">Loading...</p>
      ) : (
        <>
          <Link to="/create" className="btn btn-primary mb-3">Create New Note</Link>
          <ul className="list-group">
            {notes.length === 0 ? (
              <p className="text-center">No notes available</p>
            ) : (
              notes.map(note => (
                <li key={note._id} className="list-group-item d-flex justify-content-between align-items-center mb-2">
                  <div>
                    <h5>{note.title}</h5>
                    <p>{note.content}</p>
                  </div>
                  <div>
                    <Link to={`/edit/${note._id}`} className="btn btn-warning btn-sm me-2">Edit</Link>
                    <button onClick={() => handleDelete(note._id)} className="btn btn-danger btn-sm">Delete</button>
                  </div>
                </li>
              ))
            )}
          </ul>
        </>
      )}
    </div>
  );
};

export default NoteList;
// frontend/src/components/ProtectedRoute.js
import React from 'react';
import { Navigate } from 'react-router-dom';

const ProtectedRoute = ({ children }) => {
  const token = localStorage.getItem('token');

  return token ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;
// frontend/src/components/Register.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import './Register.css';

const Register = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      await axios.post('http://localhost:5000/register', { email, password });
      navigate('/login');
    } catch (error) {
      setError('User already exists');
    }
  };

  return (
    <div className="register-form">
      <h2>Register</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            className="form-control"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            className="form-control"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="btn btn-primary">Register</button>
      </form>
      <p>Already have an account? <a href="/login">Login here</a></p>
    </div>
  );
};

export default Register;

// frontend/src/App.js
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Login from './components/Login';
import Register from './components/Register';
import Dashboard from './components/Dashboard';  // Import the Dashboard component
import NoteList from './components/NoteList';
import CreateNote from './components/CreateNote';
import EditNote from './components/EditNote';
import ProtectedRoute from './components/ProtectedRoute';
import './App.css';

const App = () => {
  return (
    <div className="app">
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route
          path="/dashboard"
          element={
            <ProtectedRoute>
              <Dashboard />
            </ProtectedRoute>
          }
        />
        <Route
          path="/notes"
          element={
            <ProtectedRoute>
              <NoteList />
            </ProtectedRoute>
          }
        />
        <Route
          path="/create"
          element={
            <ProtectedRoute>
              <CreateNote />
            </ProtectedRoute>
          }
        />
        <Route
          path="/edit/:id"
          element={
            <ProtectedRoute>
              <EditNote />
            </ProtectedRoute>
          }
        />
        <Route path="/" element={<Login />} />
      </Routes>
    </div>
  );
};

export default App;


﻿



